use druid::widget::{Button, CrossAxisAlignment, Flex, Label, List, Scroll, TextBox, Container};
use druid::{AppLauncher, Data, Lens, Widget, WidgetExt, WindowDesc, Color};
use std::fs;
use std::process::Command;
use std::sync::Arc;
use rfd::FileDialog;
use std::path::{PathBuf, Path};
use walkdir::WalkDir;

#[derive(Clone, Data, Lens)]
struct AppState {
    selected_folder: String,
    files: Arc<Vec<FileItem>>,
    search_enabled: bool,
    search_query: String,
}

#[derive(Clone, Data)]
struct FileItem {
    name: String,
    path: String,
    relative_path: String, // –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏
}

fn build_ui() -> impl Widget<AppState> {
    let select_folder_button = Button::new("üìÅ")
        .on_click(|_, data: &mut AppState, _| {
            if let Some(folder) = FileDialog::new().pick_folder() {
                data.selected_folder = folder.to_string_lossy().to_string();
                data.search_enabled = true;
            }
        })
        .padding(5.0)
        .fix_width(100.0)
        .background(Color::rgb8(100, 149, 237)) // –¶–≤–µ—Ç –∫–Ω–æ–ø–∫–∏
        .rounded(5.0) // –ó–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã
        .center();

    let search_box = TextBox::new()
        .with_placeholder("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞")
        .lens(AppState::search_query)
        .padding(10.0)
        .fix_width(200.0)
        .border(Color::rgb8(150, 150, 150), 1.0) // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 1.0 –¥–ª—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å —Ç–æ–ª—â–∏–Ω–æ–π —Ä–∞–º–∫–∏ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        .center();

    let search_button = Button::new("üîç")
        .on_click(|ctx, data: &mut AppState, _| {
            data.files = search_files(&data.selected_folder, &data.search_query);
            ctx.request_update();
        })
        .disabled_if(|data: &AppState, _| !data.search_enabled)
        .padding(5.0)
        .fix_width(100.0)
        .background(Color::rgb8(100, 237, 149)) // –¶–≤–µ—Ç –∫–Ω–æ–ø–∫–∏
        .rounded(5.0) // –ó–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã
        .center();

    let folder_display = Container::new(Label::dynamic(|data: &AppState, _| {
        if data.selected_folder.is_empty() {
            "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞".to_string()
        } else {
            format!("–í—ã–±—Ä–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {}", data.selected_folder)
        }
    }))
    .border(Color::rgb8(150, 150, 150), 1.0) // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 1.0 –¥–ª—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å —Ç–æ–ª—â–∏–Ω–æ–π —Ä–∞–º–∫–∏ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    .padding(10.0)
    .fix_width(400.0)
    .center();

    let file_list = Scroll::new(List::new(|| {
        Flex::row()
            .cross_axis_alignment(CrossAxisAlignment::Center)
            .with_child(Label::dynamic(|item: &FileItem, _| item.relative_path.clone())
                .padding(5.0)
                .center()
                .background(Color::rgba8(240, 240, 240, 128)) // –¶–≤–µ—Ç —Ñ–æ–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞
                .rounded(5.0)) // –ó–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã
            .with_spacer(10.0)
            .with_child(
                Button::new("üìÇ")  // –û—Ç–∫—Ä—ã—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                    .on_click(|_, item: &mut FileItem, _| {
                        open_folder(&item.path);
                    })
                    .padding(5.0)
                    .fix_width(100.0)
                    .background(Color::rgb8(100, 237, 149)) // –¶–≤–µ—Ç –∫–Ω–æ–ø–∫–∏
                    .rounded(5.0)
                    .center()
            )
            .with_spacer(5.0)
            .with_child(
                Button::new("üóë")  // –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª
                    .on_click(|_, item: &mut FileItem, _| {
                        delete_file(&item.path);
                    })
                    .padding(5.0)
                    .fix_width(100.0)
                    .background(Color::rgb8(237, 100, 100)) // –¶–≤–µ—Ç –∫–Ω–æ–ø–∫–∏
                    .rounded(5.0)
                    .center()
            )
    }))
    .lens(AppState::files)
    .padding(5.0);

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ñ–æ–Ω–æ–≤—ã–º —Ü–≤–µ—Ç–æ–º
    let background = Container::new(
        Flex::column()
            .cross_axis_alignment(CrossAxisAlignment::Center)
            .with_child(
                Flex::row()
                    .with_child(select_folder_button)
                    .with_spacer(10.0)
                    .with_child(search_box)
                    .with_spacer(10.0)
                    .with_child(search_button)
                    .padding(5.0)
            )
            .with_spacer(10.0)
            .with_child(folder_display) // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            .with_flex_child(file_list, 1.0)
            .padding(5.0)
    )
    .background(Color::rgb8(126, 91, 155)) // –ó–∞–¥–∞–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
    .padding(5.0); // –û—Ç—Å—Ç—É–ø –≤–æ–∫—Ä—É–≥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    background
}
fn search_files(path: &str, query: &str) -> Arc<Vec<FileItem>> {
    let root_path = Path::new(path).to_path_buf(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    let files = WalkDir::new(path)
        .into_iter()
        .filter_map(|entry| entry.ok()) // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–æ–∫
        .filter_map(|entry| {
            let path = entry.path().to_path_buf();
            let name = path.file_name()?.to_string_lossy().to_string();

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
            let relative_path = if path.parent() == Some(&root_path) {
                name.clone() // –ï—Å–ª–∏ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è
            } else {
                path.strip_prefix(&root_path).ok()?.to_string_lossy().to_string() // –ò–Ω–∞—á–µ - –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
            };

            Some(FileItem {
                name: name.clone(),
                path: path.to_string_lossy().to_string(),
                relative_path, // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
            })
        })
        .filter(|file| query.is_empty() || file.name.contains(query))
        .collect::<Vec<_>>();

    Arc::new(files)
}

fn open_folder(file_path: &str) {
    let path = PathBuf::from(file_path);
    if let Some(parent) = path.parent() {
        if cfg!(target_os = "windows") {
            let _ = Command::new("explorer").arg(parent).spawn();
        } else if cfg!(target_os = "macos") {
            let _ = Command::new("open").arg(parent).spawn();
        } else {
            let _ = Command::new("xdg-open").arg(parent).spawn();
        }
    }
}

fn delete_file(file_path: &str) {
    if let Err(e) = fs::remove_file(file_path) {
        println!("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {}: {}", file_path, e);
    } else {
        println!("–§–∞–π–ª {} —É–¥–∞–ª–µ–Ω", file_path);
    }
}

#[cfg(target_os = "windows")]
fn hide_console_window() {
    #[cfg(not(debug_assertions))]
    {
        use winapi::um::wincon::FreeConsole;
        unsafe {
            FreeConsole();
        }
    }
}

fn main() {
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Å–æ–ª—å —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–ª–∏–∑–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –Ω–∞ Windows
    #[cfg(target_os = "windows")]
    hide_console_window();

    let main_window = WindowDesc::new(build_ui())
        .title("File Finder")
        .window_size((1100.0, 900.0));

    let initial_state = AppState {
        selected_folder: "".to_string(),
        files: Arc::new(Vec::new()),
        search_enabled: false,
        search_query: "".to_string(),
    };

    AppLauncher::with_window(main_window)
        // –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π —Å–±–æ—Ä–∫–∏
        .log_to_console_if_debug()
        .launch(initial_state)
        .expect("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ");
}

trait AppLauncherExt {
    fn log_to_console_if_debug(self) -> Self;
}

impl AppLauncherExt for AppLauncher<AppState> {
    fn log_to_console_if_debug(self) -> Self {
        #[cfg(debug_assertions)]
        {
            self.log_to_console()
        }

        #[cfg(not(debug_assertions))]
        {
            self
        }
    }
}
